{"version":3,"sources":["../scripts.babel/popup.js"],"names":[],"mappings":"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","file":"popup.js","sourcesContent":["'use strict';\n\n//This was written when I was first learning Web Dev\n//This code can be improved, and I am open to any\n//Efficiency Pull requests, because currently it works\n//And it is just a simple chrome extension :)\n\n\n//Our arraylists for our numbers and operators\nvar operators = [];\nvar priority = [];\nvar operatorOrder = [];\nvar numbers = [];\nvar answer;\n\n//Our Main Input\nvar inputBox;\n\n//Adding \"r\" to mean root!\n//Regexes for fetching our input\nvar operatorsRegex = /[-*xX+/^%rR]/g;\nvar numbersRegex = /[.0-9-*xX+/^%rR]/g;\nvar priorityRegex = /[-*xX+/^%()rR]/g;\n\n// Initialize on page load\n//Function that is called on popup open to get out contents\nfunction init() {\n\n  // Use default value of nothing\n  chrome.storage.sync.get({\n    expression: '',\n    answer: ''\n  }, function(items) {\n\n    //In this call back, set the retrieved value\n    document.getElementById('inputBox').value = items.expression;\n    document.getElementById('answer').innerHTML = items.answer;\n\n  });\n}\n\n//Functions to call on page load.\ndocument.addEventListener('DOMContentLoaded', function() {\n\n    //Get the input box and focus on it\n    inputBox = document.getElementById(\"inputBox\");\n    inputBox.focus();\n\n    /*\n        Save Input calls compute and then saves\n        Save Input should be called in onbeforeunload\n        However Chrome has a bug where this is not fired\n        for it's extension, and our only reliable connection\n        will be onkeyup, as blur is not called on closing\n        the popup, and we cant interact with the elements\n        of the popup from the background page after it has been\n        unloaded. I am open to any suggestions!\n    */\n    inputBox.addEventListener(\"keyup\", saveInput);\n    inputBox.addEventListener(\"keydown\", compute);\n\n    var clearButton = document.getElementById(\"clearButton\");\n    clearButton.addEventListener(\"click\", clear);\n\n    //Grab the saved input from last close\n    init();\n});\n\n//Function to save the user input\n//Save the user info whenever the input box is blurred\nfunction saveInput() {\n\n    //First compute the answer\n    compute();\n\n    //Save their info\n    chrome.storage.sync.set({\n      expression: document.getElementById('inputBox').value,\n      answer: document.getElementById('answer').innerHTML\n  });\n}\n\n//Function to compute answer and display it in text\nfunction compute()\n{\n\toperators = [];\n\tnumbers = [];\n\n\t//Get the input from the text box, working\n\tlet input = document.getElementById('inputBox').value;\n\n\t//parse the string\n\tparseInput(input);\n\n\t//Use the parse string to do calculation\n\tperformMath();\n\n\t//Output answer, working\n\t//If the input is empty, else show the answer\n\tif(inputBox.value == null || inputBox.value == \"\")\n\t{\n\t\tdocument.getElementById('answer').innerHTML = \"\";\n\t}\n\telse\n\t{\n\t\tdocument.getElementById('answer').innerHTML = answer;\n\t}\n\n\t//Now reset our variables\n\t//Our arraylists for our numbers and operators\n\toperators = [];\n\tpriority = [];\n\toperatorOrder = [];\n\tnumbers = [];\n\tanswer = 0;\n\n}\n\n//Function to parse our input into operators and numbers\nfunction parseInput(math)\n{\n\t//parse the numbers and operators\n\toperators = math.match(operatorsRegex);\n\n\t//Create our operator priority array\n\tpriority = math.match(priorityRegex);\n\n\t//Doing a loop to compare how many parntheses left brackets and right brackets\n\t//surround an operator,\n\t//and then create an array (operator order) to represent which operator should be performed\n\t//Left and right paran is to keep count of how many parantheses we see as we go along\n\t//should be paralel to operator index since we only have added parantheses in this string\n\t//left brackets - right brackets = priority, since we are reading from left to right\n\t//left starts priority, and right would be closing it\n\tif(priority != null)\n\t{\n\t\tlet leftParan = 0;\n\t\tlet rightParan = 0;\n\t\tfor(let i = 0; i < priority.length; i++)\n\t\t{\n\t\t\t//If it is not a parantheses, then it is an operator\n\t\t\tif(priority[i] != \"(\" && priority[i] != \")\")\n\t\t\t{\n\t\t\t\t\t//Now that we know how many left and right parantheses surround it,\n\t\t\t\t\t//we can give it a priority, but it can never be greater than the left\n\t\t\t\t\t//parentheses since that starts our experssion\n\t\t\t\t\tlet finalPri = 0;\n\t\t\t\t\tif(leftParan - rightParan < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfinalPri = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfinalPri = leftParan - rightParan;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Add to our array\n\t\t\t\t\toperatorOrder.push(finalPri);\n\t\t\t}\n\t\t\t//Keep count of how many left parantheses we find as\n\t\t\t//we go along to save processing power\n\t\t\telse if(priority[i] == \"(\")\n\t\t\t{\n\t\t\t\tleftParan++;\n\t\t\t}\n\t\t\telse if(priority[i] == \")\")\n\t\t\t{\n\t\t\t\trightParan++;\n\t\t\t}\n\t\t}\n\t}\n\n\t//Putting all digits, persiods and opertators into an array\n\tlet tempEquation = math.match(numbersRegex);\n\t//Now we are getting all the floats from the array, by adding all digits and periods to\n\t//a string, and then parsing that string for floats\n\tif(tempEquation != null)\n\t{\n\t\tlet tempFloat = \"\";\n\t\tfor(let i = 0; i < tempEquation.length; i++)\n\t\t{\n\t\t\tif(operatorsRegex.test(tempEquation[i]) == false)\n\t\t\t{\n\t\t\t\ttempFloat = tempFloat + tempEquation[i];\n\t\t\t\t//Need to check if last digit in string\n\t\t\t\tif(i == tempEquation.length - 1)\n\t\t\t\t{\n\t\t\t\t\tnumbers.push(parseFloat(tempFloat));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(tempFloat != null && tempFloat != \"\")\n\t\t\t{\n\t\t\t\tnumbers.push(parseFloat(tempFloat));\n\t\t\t\ttempFloat = \"\";\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction performMath()\n{\n\t\t//performing math\n\t\t//Need to makesure opertators is not null or zero\n\t\tif(operators != null && operators.length > 0)\n\t\t{\n\t\t\t//perform math\n\t\t\t//make order of operations array\n\t\t\t//loop for order of operations\n\t\t\t\t//loop for doing math if those operators exist\n\t\t\t\twhile(operators.length > 0 && numbers.length >= operators.length)\n\t\t\t\t{\n\t\t\t\t\t//Find the highest priority operator\n\t\t\t\t\tlet index = 0;\n\t\t\t\t\tfor(let i = 0; i < operatorOrder.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(operatorOrder[i] > operatorOrder[index])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//If we are currently doing the operator in order of operations,\n\t\t\t\t\t//and they are more numbers than operators or an equal amount (as it should be)\n\t\t\t\t\tif(numbers[index + 1] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tlet tempAnswer;\n\t\t\t\t\t\t//Exponent\n\t\t\t\t\t\tif(operators[index] == \"^\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttempAnswer = Math.pow(numbers[index], numbers[index + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Root\n\t\t\t\t\t\tif(operators[index] == \"r\" || operators[index] == \"R\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//1 / number for root\n\t\t\t\t\t\t\ttempAnswer = Math.pow(numbers[index], 1 / numbers[index + 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Multiplication\n\t\t\t\t\t\telse if(operators[index] == \"*\" || operators[index] == \"x\"\n\t\t\t\t\t\t|| operators[index] == \"X\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttempAnswer = numbers[index] * numbers[index + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Division\n\t\t\t\t\t\telse if(operators[index] == \"/\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttempAnswer = numbers[index] / numbers[index + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Modulo\n\t\t\t\t\t\telse if(operators[index] == \"%\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttempAnswer = numbers[index] % numbers[index + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Addition\n\t\t\t\t\t\telse if(operators[index] == \"+\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttempAnswer = numbers[index] + numbers[index + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//Subtraction\n\t\t\t\t\t\telse if(operators[index] == \"-\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttempAnswer = numbers[index] - numbers[index + 1];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//Lastly replace the old numbers and remove the operators\n\t\t\t\t\t\t//Using splice method\n\t\t\t\t\t\tnumbers.splice(index, 2, tempAnswer);\n\t\t\t\t\t\toperators.splice(index, 1);\n\t\t\t\t\t\t//also need to splice our priority\n\t\t\t\t\t\toperatorOrder.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t\t//failsafe to exit the loop when we have even number of operators\n\t\t\t\t\t//or other random errors that would cause an infinite loop\n\t\t\t\t\t//and stuff after evaluating an expressions\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(numbers.length == operators.length)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\toperators.pop();\n\t\t\t\t\t\t\toperatorOrder.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t//The last remaining number is the answer\n\t\tif(numbers != null && numbers.length > 0) answer = numbers[0];\n\n\t}\n\n//function to clear the screen through the clear button\nfunction clear()\n{\n\t//Get our variables\n\tvar inputValue = document.getElementById(\"inputBox\");\n\tvar answer = document.getElementById('answer');\n\n\t//Input Box and answer\n\tdocument.getElementById('inputBox').value = \"\";\n\tdocument.getElementById('answer').innerHTML = \"\";\n\n    //Save their info\n    chrome.storage.sync.set({\n      expression: document.getElementById('inputBox').value,\n      answer: document.getElementById('answer').innerHTML\n  });\n\n\t//to prevent going back to the top of the page\n\tevent.preventDefault();\n}\n"]}